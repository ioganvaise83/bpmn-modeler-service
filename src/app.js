import 'bpmn-js/dist/assets/diagram-js.css';
import 'bpmn-js/dist/assets/bpmn-js.css';
import 'bpmn-js/dist/assets/bpmn-font/css/bpmn-embedded.css';

import './style.css';

import $ from 'jquery';
import BpmnModeler from 'bpmn-js/lib/Modeler';
import diagramXML from '../resources/newDiagram.bpmn';

const container = $('#js-drop-zone');

let modeler = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è modeler
async function initializeModeler() {
  try {
    const canvasElement = document.querySelector('#js-canvas');
    if (!canvasElement) {
      throw new Error('–≠–ª–µ–º–µ–Ω—Ç canvas –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    modeler = new BpmnModeler({
      container: canvasElement,
    });

    // –ñ–¥–µ–º –ø–æ–∫–∞ modeler –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 100));

    console.log('‚úÖ –ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ BPMN –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return modeler;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫–∞:', err);
    throw err;
  }
}

// --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async function openDiagram(xml) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ modeler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!modeler) {
      await initializeModeler();
    }

    await modeler.importXML(xml);
    container.removeClass('with-error').addClass('with-diagram');
    document.querySelector('#save-button').disabled = false;
  } catch (err) {
    container.removeClass('with-diagram').addClass('with-error');
    container.find('.error pre').text(err.message);
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ö–µ–º—ã:', err);
  }
}

async function saveDiagram() {
  try {
    console.log('üîç –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã...');
    //console.log('üîç Modeler –¥–æ—Å—Ç—É–ø–µ–Ω:', !!modeler);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ modeler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!modeler) {
      throw new Error('–ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ BPMN –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º XML –∏–∑ –º–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('üìÑ –í—ã–∑–æ–≤ modeler.saveXML...');
    const result = await modeler.saveXML({ format: true });
    console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç saveXML:', result);
    console.log('üìÑ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof result);
    console.log('üìÑ –ö–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result ? Object.keys(result) : 'result is falsy');
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!result) {
      throw new Error('–ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç undefined');
    }
    
    if (typeof result !== 'object') {
      throw new Error(`–ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø: ${typeof result}`);
    }
    
    const { xml, warnings } = result;
    
    console.log('üîç XML –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', xml);
    console.log('üîç Warnings –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', warnings);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º xml –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
    if (xml === undefined) {
      throw new Error('XML –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (undefined) –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
    }
    
    if (xml === null) {
      throw new Error('XML —Ä–∞–≤–µ–Ω null –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
    }
    
    if (typeof xml !== 'string') {
      throw new Error(`XML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: ${typeof xml}`);
    }
    
    if (!xml.trim()) {
      throw new Error('XML –ø—É—Å—Ç–æ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã)');
    }

    console.log('‚úÖ XML –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', xml && xml.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('üìã –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ XML:', xml && typeof xml === 'string' ? xml.substring(0, 200) : `XML –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: ${typeof xml}`);


    if (warnings && Array.isArray(warnings) && warnings.length > 0) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', warnings);
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ XML –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    const res = await fetch('http://localhost:8081/diagram', {
      method: 'POST',
      headers: { 'Content-Type': 'application/xml' },
      body: xml
    });

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.status, res.statusText);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const responseText = await res.text();
    console.log('–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', responseText);

    if (!res.ok) {
      // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      let errorMessage = `HTTP ${res.status}: ${res.statusText}`;
      if (responseText) {
        errorMessage += ` - ${responseText}`;
      }
      throw new Error(errorMessage);
    }

    console.log('‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);
    alert('‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    
  } catch (err) {
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', err);
    console.error('üîç –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', err.stack);
    console.error('üîç –¢–∏–ø –æ—à–∏–±–∫–∏:', err.name);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º—ã.\n\n';
    
    if (err.message.includes('Cannot read properties of undefined') || 
        err.message.includes('XML –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') ||
        err.message.includes('–ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ')) {
      userMessage += '‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å XML —Å—Ö–µ–º—É\n';
      userMessage += '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n';
      userMessage += '- –î–∏–∞–≥—Ä–∞–º–º–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞\n';
      userMessage += '- –ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n';
      userMessage += '- –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π bpmn-js\n\n';
    } else if (err.message.includes('XML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π')) {
      userMessage += '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n';
      userMessage += `–ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –≤–µ—Ä–Ω—É–ª: ${err.message.split('–ø–æ–ª—É—á–µ–Ω: ')[1]}\n\n`;
    } else if (err.message.includes('XML –ø—É—Å—Ç–æ–π')) {
      userMessage += '‚ùå –î–∏–∞–≥—Ä–∞–º–º–∞ –ø—É—Å—Ç–∞—è\n';
      userMessage += '–î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ö–µ–º—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º\n\n';
    } else if (err.name === 'TypeError' && err.message.includes('fetch')) {
      userMessage += '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.\n';
      userMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n';
      userMessage += '- –ó–∞–ø—É—â–µ–Ω –ª–∏ backend —Å–µ—Ä–≤–µ—Ä\n';
      userMessage += '- –ê–¥—Ä–µ—Å: http://backend:8081\n\n';
    } else if (err.message.includes('404')) {
      userMessage += '‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404).\n';
      userMessage += 'Endpoint /diagram –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n';
    } else if (err.message.includes('500')) {
      userMessage += '‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (500).\n';
      userMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞\n\n';
    }
    
    userMessage += `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n${err.message}`;
    
    alert(userMessage);
  }
}

async function loadDiagram() {
  $('.message.intro').hide();

  try {
    const res = await fetch('http://localhost:8081/diagram');
    if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    const xml = await res.text();
    await openDiagram(xml);
    console.log('–°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã, –∑–∞–≥—Ä—É–∂–∞—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', err);
    await openDiagram(diagramXML);
  }
}

function registerFileDrop(container, callback) {
  function handleFileSelect(e) {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    const reader = new FileReader();
    reader.onload = (e) => callback(e.target.result);
    reader.readAsText(file);
  }

  function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
  }

  const element = container.get(0);
  element.addEventListener('dragover', handleDragOver, false);
  element.addEventListener('drop', handleFileSelect, false);
}

function setEncoded(link, name, data) {
  const encodedData = encodeURIComponent(data);
  if (data) {
    link.classList.add('active');
    link.setAttribute('href', 'data:text/xml;charset=UTF-8,' + encodedData);
    link.setAttribute('download', name);
  } else {
    link.classList.remove('active');
  }
}

function debounce(fn, timeout) {
  let timer;
  return function () {
    clearTimeout(timer);
    timer = setTimeout(fn, timeout);
  };
}

const exportArtifacts = debounce(async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ modeler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!modeler) {
      console.log('‚ö†Ô∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç');
      return;
    }

    const { svg } = await modeler.saveSVG();
    setEncoded(document.querySelector('#js-download-svg'), 'diagram.svg', svg);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SVG:', err);
    setEncoded(document.querySelector('#js-download-svg'), 'diagram.svg', null);
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ modeler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!modeler) {
      console.log('‚ö†Ô∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç XML');
      return;
    }

    const result = await modeler.saveXML({ format: true });

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å
    if (!result) {
      console.error('‚ö†Ô∏è saveXML –≤–µ—Ä–Ω—É–ª undefined');
      throw new Error('saveXML –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
    }

    // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—Ç—å xml
    const { xml, warnings } = result;

    // –ü—Ä–æ–≤–µ—Ä–∏–º xml –æ—Ç–¥–µ–ª—å–Ω–æ
    if (typeof xml !== 'string') {
      console.error('‚ö†Ô∏è saveXML –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø xml:', typeof xml, result);
      throw new Error(`XML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ ${typeof xml}`);
    }

    if (!xml.trim()) {
      console.error('‚ö†Ô∏è saveXML –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π XML:', xml);
      throw new Error('XML –ø—É—Å—Ç–æ–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∏–∞–≥—Ä–∞–º–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤.');
    }

    setEncoded(document.querySelector('#js-download-diagram'), 'diagram.bpmn', xml);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ XML:', err);
    setEncoded(document.querySelector('#js-download-diagram'), 'diagram.bpmn', null);
  }
}, 500);

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI ---

async function setupUI() {
  if (!window.FileList || !window.FileReader) {
    alert(
      '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç drag and drop. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä Chrome –∏–ª–∏ Firefox.'
    );
  } else {
    registerFileDrop(container, openDiagram);
  }

  document.querySelector('#js-create-diagram')?.addEventListener('click', (e) => {
    e.preventDefault();
    openDiagram(diagramXML);
    $('.message.intro').hide();
  });

  document.querySelector('#save-button')?.addEventListener('click', saveDiagram);
  document.querySelector('#load-button')?.addEventListener('click', loadDiagram);

  document.querySelectorAll('.buttons a').forEach((el) => {
    el.addEventListener('click', (e) => {
      if (!el.classList.contains('active')) {
        e.preventDefault();
        e.stopPropagation();
      }
    });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º modeler –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  try {
    await initializeModeler();
    modeler.on('commandStack.changed', exportArtifacts);
    console.log('‚úÖ UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ UI:', err);
  }
}

// --- –°—Ç–∞—Ä—Ç ---

window.addEventListener('DOMContentLoaded', async () => {
  await setupUI();
  await loadDiagram(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
});
